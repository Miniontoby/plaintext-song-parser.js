!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).Song=e()}(this,(function(){"use strict";class t{constructor(e,n=null,i=null){this.content="",this.identifier=null,this.title=null,this.couplets=[],this.coupletsWithReferences=[],n&&(this.identifier=Number(n),isNaN(this.identifier)&&(this.identifier=n)),e&&""!==e&&(this.content="string"==typeof e?e:e.join("\n")),i&&""!==i&&(this.title=i),this.content&&(null===this.title&&(this.title=t.getTitleFromText(this.getLines(!0))),this.process())}get lines(){return this.getLines()}getLines(t=!1){const e=this.content?.split(/\r?\n/);if(!e)return null;const n=e.findIndex((t=>!t.startsWith("#")));return t?e.slice(0,n):e.slice(n)}process(){if(!this.lines)return;let t=this.lines.join("\n").split("\n\n").map((t=>[t]));t=t.map((t=>t[0].split("[split]\n")));const e=t[t.length-1],n=e[e.length-1];n.endsWith("\n")&&(t[t.length-1][e.length-1]=n.slice(0,-1));const i=t.map(((t,e)=>t[0].split("\n")[0].endsWith(":")&&1==t[0].split("\n")[0].split(" ").length?[e,t]:null)).filter((t=>null!==t)),s=i.map((t=>[t[0],t[1][0].split("\n")[0].replace(":","")])),l=i.map((t=>{const e=t[1][0].split("\n");return e.splice(0,1),t[1][0]=e.join("\n"),t[1]})),r=s.map(((t,e)=>[t[0],t[1],l[e]]));let o=t.map(((t,e)=>{const n=t[0].split("\n");if(t.length>1||n.length>1)return null;const i=s.map((t=>t[1]));return i.includes(n[0])||i.includes(n[0].replace("Repeat ",""))||i.includes(n[0].replace(/\(([\w]+)( (\d+)x|)\)/,"$1"))?[e,n[0]]:null})).filter((t=>null!==t));o=o.map((t=>[t[0],t[1].replace("Repeat ","").replace(/\((\w+)( (\d+)x|)\)/,"$1$2")]));const c=o.map((t=>{const e=t[1].replace(/ (\d+)x/,""),n=Number(t[1].replace(/(\w+)( (\d+)x|)/,"$3"))||1,i=r.find((t=>t[1]==e));if(i)return[t[0],e,n,i[2]]})).filter((t=>null!==t));this.coupletsWithReferences=JSON.parse(JSON.stringify(t));for(const[e,n,i,s]of c){t[e]=s;for(let n=1;n<i;n++)t[e]=[...t[e],...s]}this.couplets=t}static getTitleFromText(t){const e="string"==typeof t?t.split(/\r?\n/):t;return e&&e.length>0&&e[0].startsWith("#")?e[0].startsWith("# ")?e[0].substring(2):e[0].substring(1):null}}return t}));
//# sourceMappingURL=plaintext-song-parser.min.js.map
