{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["export default class Song {\r\n\tcontent: string = '';\r\n\tidentifier: number|string|null = null;\r\n\ttitle: string|null = null;\r\n\tcouplets: string[][] = [];\r\n\tcoupletsWithReferences: string[][] = [];\r\n\tmodifiers: {title?: string}&any = {};\r\n\tconstructor(content: string[]|string, identifier: number|string|null = null, title: string|null = null) {\r\n\t\tif (identifier) {\r\n\t\t\tthis.identifier = Number(identifier);\r\n\t\t\tif (isNaN(this.identifier)) this.identifier = identifier;\r\n\t\t}\r\n\t\tif (content && content !== '') {\r\n\t\t\tif (typeof (content) == 'string') this.content = content;\r\n\t\t\telse this.content = content.join('\\n');\r\n\t\t}\r\n\t\tif (title && title !== '') this.title = title;\r\n\t\tif (this.content) {\r\n\t\t\tthis.modifiers = Song.getModifiersFromText(this.getLines(true));\r\n\t\t\tif (this.title === null && this.modifiers?.title) this.title = this.modifiers.title;\r\n\t\t\tthis.process();\r\n\t\t}\r\n\t}\r\n\tget lines(): string[]|null {\r\n\t\treturn this.getLines();\r\n\t}\r\n\tprivate getLines(returnComments = false): string[]|null {\r\n\t\tconst allLines = this.content?.split(/\\r?\\n/);\r\n\t\tif (!allLines) return null;\r\n\t\tconst firstNonCommentIndex = allLines.findIndex(line => !line.startsWith('#'));\r\n\t\tif (returnComments) return allLines.slice(0, firstNonCommentIndex > -1 ? firstNonCommentIndex : undefined); // +1 cause this is exclusive of the element at the index 'end'\r\n\t\telse return allLines.slice(firstNonCommentIndex);\r\n\t}\r\n\tprocess(): void {\r\n\t\tif (!this.lines) return;\r\n\r\n\t\tconst paragraphs1 = this.lines.join('\\n').split('\\n\\n'); // split the paragraphs\r\n\t\tlet paragraphs = paragraphs1.map((al) => [al]); // map the paragraphs in seperate arrays\r\n\t\tparagraphs = paragraphs.map((al) => al[0].split('[split]\\n')); // split the paragraphs on the keyword: '[split]'\r\n\t\tconst lastPart = paragraphs[paragraphs.length - 1],lastAl = lastPart[lastPart.length - 1]; // get the last array of the last paragraph\r\n\t\tif (lastAl.endsWith('\\n')) paragraphs[paragraphs.length - 1][lastPart.length - 1] = lastAl.slice(0, -1); // Make sure to remove the linebreak of the last paragraph, else some statements will fail\r\n\t\tconst parts = paragraphs.map((al, i) => {\r\n\t\t\tif (al[0].split('\\n')[0].endsWith(':') && al[0].split('\\n')[0].split(' ').length == 1) return [i, al];\r\n\t\t\treturn null;\r\n\t\t}).filter((x): x is [number, string[]] => x !== null); // filter all paragraphs that end on ':' and that contain no spaces\r\n\t\tconst blockNames = parts.map((al) => [al[0], al[1][0].split('\\n')[0].replace(':', '')]); // get the reference names from the parts array\r\n\t\tconst blockContents = parts.map((al) => { const lines = al[1][0].split('\\n'); lines.splice(0,1); al[1][0] = lines.join('\\n'); return al[1]; }); // get the contents of them, by removing the first line of the paragraph out of the parts array\r\n\t\tconst blocks = blockNames.map((name, i) => [name[0], name[1], blockContents[i]]); // combine the two arrays into 1 array in the format: [id, 'name', 'content']\r\n\t\tlet blockUsage = paragraphs.map((al, i) => {\r\n\t\t\tconst p = al[0].split('\\n');\r\n\t\t\tif (al.length > 1 || p.length > 1) return null;\r\n\t\t\tconst myBlockNames = blockNames.map(a=>a[1]);\r\n\t\t\tif (myBlockNames.includes(p[0]) || myBlockNames.includes(p[0].replace('Repeat ', '')) || myBlockNames.includes(p[0].replace(/\\(([\\w]+)( (\\d+)x|)\\)/, '$1'))) return [i, p[0]];\r\n\t\t\treturn null;\r\n\t\t}).filter((x): x is [number, string] => x !== null); // filter the paragraphs that include an reference to an existing reference\r\n\t\tblockUsage = blockUsage.map((us) => [us[0], us[1].replace('Repeat ', '').replace(/\\((\\w+)( (\\d+)x|)\\)/, '$1$2')]); // Remove 'Repeat ' keyword from the text and the '(key)' and '(key 2x)' keywords\r\n\t\tconst blockUsing = blockUsage.map((us)=>{\r\n\t\t\tconst ourid = us[1].replace(/ (\\d+)x/, '');\r\n\t\t\tconst amount = Number(us[1].replace(/(\\w+)( (\\d+)x|)/, '$3')) || 1;\r\n\t\t\tconst out = blocks.find((bl) => bl[1] == ourid);\r\n\t\t\tif (!out) return;\r\n\t\t\treturn [us[0], ourid, amount, out[2]]; // [index inside paragraphs, blockName, amount of repeats, text]\r\n\t\t}).filter((x): x is [number, string, number, string[]] => x !== null);\r\n\r\n\t\tthis.coupletsWithReferences = JSON.parse(JSON.stringify(paragraphs));\r\n\t\tfor (const [index, blockName, amount, text] of blockUsing) {\r\n\t\t\tparagraphs[index] = text; // replace the contents of the paragraph with the contents of the reference\r\n\t\t\tfor (let i=1;i<amount;i++) paragraphs[index] = [...paragraphs[index], ...text]; // repeat adding in the contents for the amount\r\n\t\t}\r\n\t\tthis.couplets = paragraphs;\r\n\t}\r\n\tstatic getTitleFromText(content: string[]|string): string|null {\r\n\t\tconst modifiers = Song.getModifiersFromText(content);\r\n\t\treturn modifiers?.title ?? null;\r\n\t}\r\n\tstatic getModifiersFromText(content: string[]|string): {title: string}&any {\r\n\t\tconst lines = (typeof (content) == 'string') ? content.split(/\\r?\\n/) : content;\r\n\t\tif (lines === null || lines === undefined) return {};\r\n\t\tconst firstNonCommentIndex = lines?.findIndex(line => !line.startsWith('#'));\r\n\t\tconst comments = lines.slice(0, firstNonCommentIndex > -1 ? firstNonCommentIndex : undefined);\r\n\t\tconst modifiers = {};\r\n\t\tfor (let comment of comments) {\r\n\t\t\tcomment = comment.replace(/^#\\s*/, ''); // Remove comment prefix\r\n\t\t\tconst regex = /^([\\w]+)\\s*=\\s*(.*)$/;\r\n\t\t\tconst m = regex.exec(comment);\r\n\t\t\tif (m) {\r\n\t\t\t\tmodifiers[m[1]] = m[2];\r\n\t\t\t\tif (m[2] === 'true') modifiers[m[1]] = true;\r\n\t\t\t\telse if (m[2] === 'false') modifiers[m[1]] = false;\r\n\t\t\t\telse if (!isNaN(Number(m[2]))) modifiers[m[1]] = Number(m[2]);\r\n\t\t\t} else if (!comment.includes('=')) {\r\n\t\t\t\tmodifiers['title'] = comment;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn modifiers;\r\n\t}\r\n}"],"names":[],"mappings":"AAAc,MAAO,IAAI,CAAA;AAOxB,IAAA,WAAA,CAAY,OAAwB,EAAE,UAAA,GAAiC,IAAI,EAAE,QAAqB,IAAI,EAAA;QANtG,IAAO,CAAA,OAAA,GAAW,EAAE,CAAC;QACrB,IAAU,CAAA,UAAA,GAAuB,IAAI,CAAC;QACtC,IAAK,CAAA,KAAA,GAAgB,IAAI,CAAC;QAC1B,IAAQ,CAAA,QAAA,GAAe,EAAE,CAAC;QAC1B,IAAsB,CAAA,sBAAA,GAAe,EAAE,CAAC;QACxC,IAAS,CAAA,SAAA,GAAyB,EAAE,CAAC;QAEpC,IAAI,UAAU,EAAE;AACf,YAAA,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;AACrC,YAAA,IAAI,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC;AAAE,gBAAA,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;SACzD;AACD,QAAA,IAAI,OAAO,IAAI,OAAO,KAAK,EAAE,EAAE;AAC9B,YAAA,IAAI,QAAQ,OAAO,CAAC,IAAI,QAAQ;AAAE,gBAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;;gBACpD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACvC;AACD,QAAA,IAAI,KAAK,IAAI,KAAK,KAAK,EAAE;AAAE,YAAA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AAC9C,QAAA,IAAI,IAAI,CAAC,OAAO,EAAE;AACjB,YAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YAChE,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,SAAS,EAAE,KAAK;gBAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;YACpF,IAAI,CAAC,OAAO,EAAE,CAAC;SACf;KACD;AACD,IAAA,IAAI,KAAK,GAAA;AACR,QAAA,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;KACvB;IACO,QAAQ,CAAC,cAAc,GAAG,KAAK,EAAA;QACtC,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;AAC9C,QAAA,IAAI,CAAC,QAAQ;AAAE,YAAA,OAAO,IAAI,CAAC;AAC3B,QAAA,MAAM,oBAAoB,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;AAC/E,QAAA,IAAI,cAAc;YAAE,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,oBAAoB,GAAG,CAAC,CAAC,GAAG,oBAAoB,GAAG,SAAS,CAAC,CAAC;;AACtG,YAAA,OAAO,QAAQ,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;KACjD;IACD,OAAO,GAAA;QACN,IAAI,CAAC,IAAI,CAAC,KAAK;YAAE,OAAO;AAExB,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AACxD,QAAA,IAAI,UAAU,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/C,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;QAC9D,MAAM,QAAQ,GAAG,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,EAAC,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAC1F,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;YAAE,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxG,MAAM,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,KAAI;AACtC,YAAA,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC;AAAE,gBAAA,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACtG,YAAA,OAAO,IAAI,CAAC;AACb,SAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAA8B,CAAC,KAAK,IAAI,CAAC,CAAC;AACtD,QAAA,MAAM,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AACxF,QAAA,MAAM,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,KAAO,EAAA,MAAM,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AAC/I,QAAA,MAAM,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjF,IAAI,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,KAAI;YACzC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC5B,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC;AAAE,gBAAA,OAAO,IAAI,CAAC;AAC/C,YAAA,MAAM,YAAY,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,IAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,YAAA,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAC;gBAAE,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9K,YAAA,OAAO,IAAI,CAAC;AACb,SAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAA4B,CAAC,KAAK,IAAI,CAAC,CAAC;AACpD,QAAA,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;QAClH,MAAM,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,KAAG;AACvC,YAAA,MAAM,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;AAC3C,YAAA,MAAM,MAAM,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;AACnE,YAAA,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC;AAChD,YAAA,IAAI,CAAC,GAAG;gBAAE,OAAO;AACjB,YAAA,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,SAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAA8C,CAAC,KAAK,IAAI,CAAC,CAAC;AAEtE,QAAA,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;AACrE,QAAA,KAAK,MAAM,CAAC,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,UAAU,EAAE;AAC1D,YAAA,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;YACzB,KAAK,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,MAAM,EAAC,CAAC,EAAE;AAAE,gBAAA,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;SAC/E;AACD,QAAA,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;KAC3B;IACD,OAAO,gBAAgB,CAAC,OAAwB,EAAA;QAC/C,MAAM,SAAS,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;AACrD,QAAA,OAAO,SAAS,EAAE,KAAK,IAAI,IAAI,CAAC;KAChC;IACD,OAAO,oBAAoB,CAAC,OAAwB,EAAA;QACnD,MAAM,KAAK,GAAG,CAAC,QAAQ,OAAO,CAAC,IAAI,QAAQ,IAAI,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;AAChF,QAAA,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS;AAAE,YAAA,OAAO,EAAE,CAAC;AACrD,QAAA,MAAM,oBAAoB,GAAG,KAAK,EAAE,SAAS,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7E,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,oBAAoB,GAAG,CAAC,CAAC,GAAG,oBAAoB,GAAG,SAAS,CAAC,CAAC;QAC9F,MAAM,SAAS,GAAG,EAAE,CAAC;AACrB,QAAA,KAAK,IAAI,OAAO,IAAI,QAAQ,EAAE;YAC7B,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACvC,MAAM,KAAK,GAAG,sBAAsB,CAAC;YACrC,MAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC9B,IAAI,CAAC,EAAE;gBACN,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,gBAAA,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,MAAM;oBAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AACvC,qBAAA,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,OAAO;oBAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;qBAC9C,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAAE,oBAAA,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAC9D;iBAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;AAClC,gBAAA,SAAS,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;aAC7B;SACD;AACD,QAAA,OAAO,SAAS,CAAC;KACjB;AACD;;;;"}